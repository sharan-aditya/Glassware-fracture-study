import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.optimizers import Adam

# Load the dataset
df = pd.read_csv('ceramic_glassware_dummy_data.csv')

# One-hot encode the categorical features
categorical_features = ['Crystal Lattice Shape']
df = pd.get_dummies(df, columns=categorical_features)

# Define the features and target variables
X = df.drop(['Yield Stress (MPa)', 'Ultimate Stress Point'], axis=1)
y_yield_stress = df['Yield Stress (MPa)']
y_ultimate_stress_point = df['Ultimate Stress Point']

# Normalize the features to range [0, 1]
scaler = MinMaxScaler()
X_normalized = scaler.fit_transform(X)

# Split the data into training and testing sets
X_train, X_test, y_train_yield, y_test_yield = train_test_split(X_normalized, y_yield_stress, test_size=0.2, random_state=42)
X_train, X_test, y_train_ultimate, y_test_ultimate = train_test_split(X_normalized, y_ultimate_stress_point, test_size=0.2, random_state=42)

# Define the neural network architecture for Yield Stress model
model_yield_stress = Sequential([
    Flatten(input_shape=(X.shape[1],)),
    Dense(64, activation='relu'),
    Dense(32, activation='relu'),
    Dense(1)
])

# Compile the model for Yield Stress
model_yield_stress.compile(optimizer=Adam(learning_rate=0.001), loss='mean_squared_error', metrics=['mae'])

# Train the Yield Stress model
model_yield_stress.fit(X_train, y_train_yield, epochs=4, batch_size=32, verbose=1)

# Evaluate the Yield Stress model
y_pred_yield = model_yield_stress.predict(X_test)
mse_yield = mean_squared_error(y_test_yield, y_pred_yield)
mae_yield = mean_absolute_error(y_test_yield, y_pred_yield)
r2_yield = r2_score(y_test_yield, y_pred_yield)

print(f"Yield Stress Model - MSE: {mse_yield}, MAE: {mae_yield}, R^2: {r2_yield}")

# Define the neural network architecture for Ultimate Stress Point model
model_ultimate_stress_point = Sequential([
    Flatten(input_shape=(X.shape[1],)),
    Dense(64, activation='relu'),
    Dense(32, activation='relu'),
    Dense(1)
])

# Compile the model for Ultimate Stress Point
model_ultimate_stress_point.compile(optimizer=Adam(learning_rate=0.001), loss='mean_squared_error', metrics=['mae'])

# Train the Ultimate Stress Point model
model_ultimate_stress_point.fit(X_train, y_train_ultimate, epochs=4, batch_size=32, verbose=1)

# Evaluate the Ultimate Stress Point model
y_pred_ultimate = model_ultimate_stress_point.predict(X_test)
mse_ultimate = mean_squared_error(y_test_ultimate, y_pred_ultimate)
mae_ultimate = mean_absolute_error(y_test_ultimate, y_pred_ultimate)
r2_ultimate = r2_score(y_test_ultimate, y_pred_ultimate)

print(f"Ultimate Stress Point Model - MSE: {mse_ultimate}, MAE: {mae_ultimate}, R^2: {r2_ultimate}")


//Results:
>>Epoch 1/4
250/250 [==============================] - 1s 2ms/step - loss: 56.7846 - mae: 5.7635
Epoch 2/4
250/250 [==============================] - 0s 2ms/step - loss: 2.3137 - mae: 1.0299
Epoch 3/4
250/250 [==============================] - 0s 1ms/step - loss: 0.0064 - mae: 0.0538
Epoch 4/4
250/250 [==============================] - 0s 2ms/step - loss: 0.0033 - mae: 0.0385
63/63 [==============================] - 0s 1ms/step
Yield Stress Model - MSE: 0.0026674617030924327, MAE: 0.03421462986645477, R^2: 0.9998824746783728
>>Epoch 1/4
250/250 [==============================] - 2s 3ms/step - loss: 17381.5547 - mae: 108.7452
Epoch 2/4
250/250 [==============================] - 1s 3ms/step - loss: 2644.2234 - mae: 42.6021
Epoch 3/4
250/250 [==============================] - 1s 3ms/step - loss: 1315.4558 - mae: 29.8408
Epoch 4/4
250/250 [==============================] - 1s 3ms/step - loss: 372.1451 - mae: 14.8171
63/63 [==============================] - 0s 3ms/step
Ultimate Stress Point Model - MSE: 154.7474785115047, MAE: 9.236538804825283, R^2: 0.9639333067382265
